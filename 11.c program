#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#define MAX_STATES 10 // Maximum number of states in the NFA

typedef struct {
    int transitions[MAX_STATES]; // Array to store transitions using ε-moves
    int num_transitions;
} NFA_State;

NFA_State nfa[MAX_STATES];
int num_states;

void add_transition(int from_state, int to_state) {
    nfa[from_state].transitions[nfa[from_state].num_transitions++] = to_state;
}

void find_epsilon_closure(int state, bool visited[]) {
    visited[state] = true;

    for (int i = 0; i < nfa[state].num_transitions; i++) {
        int target_state = nfa[state].transitions[i];
        if (!visited[target_state]) {
            find_epsilon_closure(target_state, visited);
        }
    }
}

int main() {
    printf("Enter the number of states in the NFA: ");
    scanf("%d", &num_states);

    for (int i = 0; i < num_states; i++) {
        nfa[i].num_transitions = 0;

        printf("Enter the number of ε-transitions for state %d: ", i);
        int num_transitions;
        scanf("%d", &num_transitions);

        for (int j = 0; j < num_transitions; j++) {
            int target_state;
            printf("Enter target state for ε-transition: ");
            scanf("%d", &target_state);
            add_transition(i, target_state);
        }
    }

    printf("ε-Closure for each state:\n");
    for (int i = 0; i < num_states; i++) {
        bool visited[MAX_STATES] = {false};
        find_epsilon_closure(i, visited);

        printf("ε-Closure(%d): { ", i);
        for (int j = 0; j < num_states; j++) {
            if (visited[j]) {
                printf("%d ", j);
            }
        }
        printf("}\n");
    }

    return 0;
}
